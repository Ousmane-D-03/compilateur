State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On LET shift to state 1
-- On req_list shift to state 132
-- On req shift to state 134
-- On main shift to state 136
## Reductions:

State 1:
## Known stack suffix:
## LET
## LR(1) items:
req -> LET . ID list(ID) EQ expr [ LET EOF ]
req -> LET . REC ID list(ID) EQ expr [ LET EOF ]
## Transitions:
-- On REC shift to state 2
-- On ID shift to state 128
## Reductions:

State 2:
## Known stack suffix:
## LET REC
## LR(1) items:
req -> LET REC . ID list(ID) EQ expr [ LET EOF ]
## Transitions:
-- On ID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LET REC ID
## LR(1) items:
req -> LET REC ID . list(ID) EQ expr [ LET EOF ]
## Transitions:
-- On ID shift to state 4
-- On list(ID) shift to state 6
## Reductions:
-- On EQ
--   reduce production list(ID) ->

State 4:
## Known stack suffix:
## ID
## LR(1) items:
list(ID) -> ID . list(ID) [ EQ ]
## Transitions:
-- On ID shift to state 4
-- On list(ID) shift to state 5
## Reductions:
-- On EQ
--   reduce production list(ID) ->

State 5:
## Known stack suffix:
## ID list(ID)
## LR(1) items:
list(ID) -> ID list(ID) . [ EQ ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production list(ID) -> ID list(ID)

State 6:
## Known stack suffix:
## LET REC ID list(ID)
## LR(1) items:
req -> LET REC ID list(ID) . EQ expr [ LET EOF ]
## Transitions:
-- On EQ shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LET REC ID list(ID) EQ
## LR(1) items:
req -> LET REC ID list(ID) EQ . expr [ LET EOF ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 127
-- On app_expr shift to state 60
## Reductions:

State 8:
## Known stack suffix:
## TAIL
## LR(1) items:
simple_expr -> TAIL . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> TAIL

State 9:
## Known stack suffix:
## SUB
## LR(1) items:
expr -> SUB . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 117
-- On app_expr shift to state 60
## Reductions:

State 10:
## Known stack suffix:
## STRING
## LR(1) items:
simple_expr -> STRING . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> STRING

State 11:
## Known stack suffix:
## PRINT
## LR(1) items:
simple_expr -> PRINT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> PRINT

State 12:
## Known stack suffix:
## NOT
## LR(1) items:
simple_expr -> NOT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> NOT

State 13:
## Known stack suffix:
## NEG
## LR(1) items:
simple_expr -> NEG . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> NEG

State 14:
## Known stack suffix:
## L_SQ
## LR(1) items:
expr -> L_SQ . loption(separated_nonempty_list(SEMICOLON,atomic_expr)) R_SQ [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
simple_expr -> L_SQ . R_SQ [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On STRING shift to state 10
-- On R_SQ shift to state 15
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 16
-- On L_PAR shift to state 17
-- On INT shift to state 36
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On BOOL shift to state 43
-- On simple_expr shift to state 120
-- On separated_nonempty_list(SEMICOLON,atomic_expr) shift to state 121
-- On loption(separated_nonempty_list(SEMICOLON,atomic_expr)) shift to state 122
-- On atomic_expr shift to state 124
## Reductions:
-- On R_SQ
--   reduce production loption(separated_nonempty_list(SEMICOLON,atomic_expr)) ->
** Conflict on R_SQ

State 15:
## Known stack suffix:
## L_SQ R_SQ
## LR(1) items:
simple_expr -> L_SQ R_SQ . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_SQ R_SQ

State 16:
## Known stack suffix:
## L_SQ
## LR(1) items:
simple_expr -> L_SQ . R_SQ [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_SQ shift to state 15
## Reductions:

State 17:
## Known stack suffix:
## L_PAR
## LR(1) items:
atomic_expr -> L_PAR . expr R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . ADD R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . SUB R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . MUL R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . DIV R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . MOD R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . AND R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . OR R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . EQ R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . NEQ R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . LT R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . GT R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . LEQ R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . GEQ R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . CONCAT R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . CAT R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . APPEND R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . R_PAR [ SEMICOLON R_SQ ]
simple_expr -> L_PAR . expr R_PAR [ SEMICOLON R_SQ ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 18
-- On STRING shift to state 10
-- On R_PAR shift to state 21
-- On PRINT shift to state 11
-- On OR shift to state 22
-- On NOT shift to state 12
-- On NEQ shift to state 24
-- On NEG shift to state 13
-- On MUL shift to state 26
-- On MOD shift to state 28
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LT shift to state 30
-- On LET shift to state 32
-- On LEQ shift to state 95
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On GT shift to state 97
-- On GEQ shift to state 99
-- On FUN shift to state 40
-- On EQ shift to state 101
-- On DIV shift to state 103
-- On CONCAT shift to state 105
-- On CAT shift to state 107
-- On BOOL shift to state 43
-- On APPEND shift to state 109
-- On AND shift to state 111
-- On ADD shift to state 113
-- On simple_expr shift to state 44
-- On expr shift to state 118
-- On app_expr shift to state 60
## Reductions:

State 18:
## Known stack suffix:
## L_PAR SUB
## LR(1) items:
expr -> SUB . expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
simple_expr -> L_PAR SUB . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On R_PAR shift to state 19
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 117
-- On app_expr shift to state 60
## Reductions:

State 19:
## Known stack suffix:
## L_PAR SUB R_PAR
## LR(1) items:
simple_expr -> L_PAR SUB R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR SUB R_PAR

State 20:
## Known stack suffix:
## L_PAR
## LR(1) items:
simple_expr -> L_PAR . ADD R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . SUB R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . MUL R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . DIV R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . MOD R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . AND R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . OR R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . EQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . NEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . LT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . GT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . LEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . GEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . CONCAT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . CAT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . APPEND R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
simple_expr -> L_PAR . expr R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 18
-- On STRING shift to state 10
-- On R_PAR shift to state 21
-- On PRINT shift to state 11
-- On OR shift to state 22
-- On NOT shift to state 12
-- On NEQ shift to state 24
-- On NEG shift to state 13
-- On MUL shift to state 26
-- On MOD shift to state 28
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LT shift to state 30
-- On LET shift to state 32
-- On LEQ shift to state 95
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On GT shift to state 97
-- On GEQ shift to state 99
-- On FUN shift to state 40
-- On EQ shift to state 101
-- On DIV shift to state 103
-- On CONCAT shift to state 105
-- On CAT shift to state 107
-- On BOOL shift to state 43
-- On APPEND shift to state 109
-- On AND shift to state 111
-- On ADD shift to state 113
-- On simple_expr shift to state 44
-- On expr shift to state 115
-- On app_expr shift to state 60
## Reductions:

State 21:
## Known stack suffix:
## L_PAR R_PAR
## LR(1) items:
simple_expr -> L_PAR R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR R_PAR

State 22:
## Known stack suffix:
## L_PAR OR
## LR(1) items:
simple_expr -> L_PAR OR . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## L_PAR OR R_PAR
## LR(1) items:
simple_expr -> L_PAR OR R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR OR R_PAR

State 24:
## Known stack suffix:
## L_PAR NEQ
## LR(1) items:
simple_expr -> L_PAR NEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## L_PAR NEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR NEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR NEQ R_PAR

State 26:
## Known stack suffix:
## L_PAR MUL
## LR(1) items:
simple_expr -> L_PAR MUL . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## L_PAR MUL R_PAR
## LR(1) items:
simple_expr -> L_PAR MUL R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR MUL R_PAR

State 28:
## Known stack suffix:
## L_PAR MOD
## LR(1) items:
simple_expr -> L_PAR MOD . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## L_PAR MOD R_PAR
## LR(1) items:
simple_expr -> L_PAR MOD R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR MOD R_PAR

State 30:
## Known stack suffix:
## L_PAR LT
## LR(1) items:
simple_expr -> L_PAR LT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## L_PAR LT R_PAR
## LR(1) items:
simple_expr -> L_PAR LT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR LT R_PAR

State 32:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . ID EQ expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> LET . REC ID EQ expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On REC shift to state 33
-- On ID shift to state 90
## Reductions:

State 33:
## Known stack suffix:
## LET REC
## LR(1) items:
expr -> LET REC . ID EQ expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On ID shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LET REC ID
## LR(1) items:
expr -> LET REC ID . EQ expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On EQ shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LET REC ID EQ
## LR(1) items:
expr -> LET REC ID EQ . expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 87
-- On app_expr shift to state 60
## Reductions:

State 36:
## Known stack suffix:
## INT
## LR(1) items:
simple_expr -> INT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> INT

State 37:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 82
-- On app_expr shift to state 60
## Reductions:

State 38:
## Known stack suffix:
## ID
## LR(1) items:
simple_expr -> ID . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> ID

State 39:
## Known stack suffix:
## HEAD
## LR(1) items:
simple_expr -> HEAD . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> HEAD

State 40:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . ID ARROW expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On ID shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## FUN ID
## LR(1) items:
expr -> FUN ID . ARROW expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On ARROW shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## FUN ID ARROW
## LR(1) items:
expr -> FUN ID ARROW . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 45
-- On app_expr shift to state 60
## Reductions:

State 43:
## Known stack suffix:
## BOOL
## LR(1) items:
simple_expr -> BOOL . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> BOOL

State 44:
## Known stack suffix:
## simple_expr
## LR(1) items:
app_expr -> simple_expr . [ TAIL STRING PRINT NOT NEG L_SQ L_PAR INT ID HEAD BOOL ]
expr -> simple_expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
## Reductions:
-- On TAIL STRING PRINT NOT NEG L_SQ L_PAR INT ID HEAD BOOL
--   reduce production app_expr -> simple_expr
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> simple_expr

State 45:
## Known stack suffix:
## FUN ID ARROW expr
## LR(1) items:
expr -> FUN ID ARROW expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN R_PAR LET IN EOF ELSE APPEND
--   reduce production expr -> FUN ID ARROW expr
** Conflict on APPEND

State 46:
## Known stack suffix:
## expr SUB
## LR(1) items:
expr -> expr SUB . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 47
-- On app_expr shift to state 60
## Reductions:

State 47:
## Known stack suffix:
## expr SUB expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr SUB expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr SUB expr
** Conflict on APPEND

State 48:
## Known stack suffix:
## expr MUL
## LR(1) items:
expr -> expr MUL . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 49
-- On app_expr shift to state 60
## Reductions:

State 49:
## Known stack suffix:
## expr MUL expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr MUL expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr MUL expr
** Conflict on APPEND

State 50:
## Known stack suffix:
## expr APPEND
## LR(1) items:
expr -> expr APPEND . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 51
-- On app_expr shift to state 60
## Reductions:

State 51:
## Known stack suffix:
## expr APPEND expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr APPEND expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr APPEND expr
** Conflict on SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD

State 52:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
expr -> expr SEMICOLON . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 53
-- On app_expr shift to state 60
## Reductions:

State 53:
## Known stack suffix:
## expr SEMICOLON expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr SEMICOLON expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN R_PAR LET IN EOF ELSE APPEND
--   reduce production expr -> expr SEMICOLON expr
** Conflict on APPEND

State 54:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 55
-- On app_expr shift to state 60
## Reductions:

State 55:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr OR expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR LET IN EOF ELSE APPEND
--   reduce production expr -> expr OR expr
** Conflict on APPEND

State 56:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 57
-- On app_expr shift to state 60
## Reductions:

State 57:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr NEQ expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr NEQ expr
** Conflict on APPEND

State 58:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 59
-- On app_expr shift to state 60
## Reductions:

State 59:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr MOD expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr MOD expr
** Conflict on APPEND

State 60:
## Known stack suffix:
## app_expr
## LR(1) items:
app_expr -> app_expr . simple_expr [ TAIL STRING PRINT NOT NEG L_SQ L_PAR INT ID HEAD BOOL ]
expr -> app_expr . simple_expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 16
-- On L_PAR shift to state 20
-- On INT shift to state 36
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On BOOL shift to state 43
-- On simple_expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## app_expr simple_expr
## LR(1) items:
app_expr -> app_expr simple_expr . [ TAIL STRING PRINT NOT NEG L_SQ L_PAR INT ID HEAD BOOL ]
expr -> app_expr simple_expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
## Reductions:
-- On TAIL STRING PRINT NOT NEG L_SQ L_PAR INT ID HEAD BOOL
--   reduce production app_expr -> app_expr simple_expr
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> app_expr simple_expr

State 62:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 63
-- On app_expr shift to state 60
## Reductions:

State 63:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr DIV expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr DIV expr
** Conflict on APPEND

State 64:
## Known stack suffix:
## expr CONCAT
## LR(1) items:
expr -> expr CONCAT . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 65
-- On app_expr shift to state 60
## Reductions:

State 65:
## Known stack suffix:
## expr CONCAT expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr CONCAT expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE CONCAT APPEND AND
--   reduce production expr -> expr CONCAT expr
** Conflict on APPEND

State 66:
## Known stack suffix:
## expr CAT
## LR(1) items:
expr -> expr CAT . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 67
-- On app_expr shift to state 60
## Reductions:

State 67:
## Known stack suffix:
## expr CAT expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr CAT expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE CONCAT APPEND AND
--   reduce production expr -> expr CAT expr
** Conflict on APPEND

State 68:
## Known stack suffix:
## expr ADD
## LR(1) items:
expr -> expr ADD . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 69
-- On app_expr shift to state 60
## Reductions:

State 69:
## Known stack suffix:
## expr ADD expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr ADD expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE CONCAT CAT APPEND AND ADD
--   reduce production expr -> expr ADD expr
** Conflict on APPEND

State 70:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 71
-- On app_expr shift to state 60
## Reductions:

State 71:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr LT expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr LT expr
** Conflict on APPEND

State 72:
## Known stack suffix:
## expr LEQ
## LR(1) items:
expr -> expr LEQ . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 73
-- On app_expr shift to state 60
## Reductions:

State 73:
## Known stack suffix:
## expr LEQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr LEQ expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr LEQ expr
** Conflict on APPEND

State 74:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 75
-- On app_expr shift to state 60
## Reductions:

State 75:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr GT expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr GT expr
** Conflict on APPEND

State 76:
## Known stack suffix:
## expr GEQ
## LR(1) items:
expr -> expr GEQ . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 77
-- On app_expr shift to state 60
## Reductions:

State 77:
## Known stack suffix:
## expr GEQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr GEQ expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr GEQ expr
** Conflict on APPEND

State 78:
## Known stack suffix:
## expr EQ
## LR(1) items:
expr -> expr EQ . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 79
-- On app_expr shift to state 60
## Reductions:

State 79:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr EQ expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE APPEND AND
--   reduce production expr -> expr EQ expr
** Conflict on APPEND

State 80:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 81
-- On app_expr shift to state 60
## Reductions:

State 81:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr AND expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On ADD shift to state 68
## Reductions:
-- On THEN SEMICOLON R_PAR OR LET IN EOF ELSE APPEND AND
--   reduce production expr -> expr AND expr
** Conflict on APPEND

State 82:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> IF expr . THEN expr ELSE expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On THEN shift to state 83
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 83:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 84
-- On app_expr shift to state 60
## Reductions:

State 84:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> IF expr THEN expr . ELSE expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ GT GEQ EQ ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On ELSE shift to state 85
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 85:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 86
-- On app_expr shift to state 60
## Reductions:

State 86:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> IF expr THEN expr ELSE expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN R_PAR LET IN EOF ELSE APPEND
--   reduce production expr -> IF expr THEN expr ELSE expr
** Conflict on APPEND

State 87:
## Known stack suffix:
## LET REC ID EQ expr
## LR(1) items:
expr -> LET REC ID EQ expr . IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On IN shift to state 88
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 88:
## Known stack suffix:
## LET REC ID EQ expr IN
## LR(1) items:
expr -> LET REC ID EQ expr IN . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 89
-- On app_expr shift to state 60
## Reductions:

State 89:
## Known stack suffix:
## LET REC ID EQ expr IN expr
## LR(1) items:
expr -> LET REC ID EQ expr IN expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN R_PAR LET IN EOF ELSE APPEND
--   reduce production expr -> LET REC ID EQ expr IN expr
** Conflict on APPEND

State 90:
## Known stack suffix:
## LET ID
## LR(1) items:
expr -> LET ID . EQ expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On EQ shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LET ID EQ
## LR(1) items:
expr -> LET ID EQ . expr IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 92
-- On app_expr shift to state 60
## Reductions:

State 92:
## Known stack suffix:
## LET ID EQ expr
## LR(1) items:
expr -> LET ID EQ expr . IN expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LEQ IN GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On IN shift to state 93
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 93:
## Known stack suffix:
## LET ID EQ expr IN
## LR(1) items:
expr -> LET ID EQ expr IN . expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 94
-- On app_expr shift to state 60
## Reductions:

State 94:
## Known stack suffix:
## LET ID EQ expr IN expr
## LR(1) items:
expr -> LET ID EQ expr IN expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On THEN R_PAR LET IN EOF ELSE APPEND
--   reduce production expr -> LET ID EQ expr IN expr
** Conflict on APPEND

State 95:
## Known stack suffix:
## L_PAR LEQ
## LR(1) items:
simple_expr -> L_PAR LEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## L_PAR LEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR LEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR LEQ R_PAR

State 97:
## Known stack suffix:
## L_PAR GT
## LR(1) items:
simple_expr -> L_PAR GT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## L_PAR GT R_PAR
## LR(1) items:
simple_expr -> L_PAR GT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR GT R_PAR

State 99:
## Known stack suffix:
## L_PAR GEQ
## LR(1) items:
simple_expr -> L_PAR GEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## L_PAR GEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR GEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR GEQ R_PAR

State 101:
## Known stack suffix:
## L_PAR EQ
## LR(1) items:
simple_expr -> L_PAR EQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## L_PAR EQ R_PAR
## LR(1) items:
simple_expr -> L_PAR EQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR EQ R_PAR

State 103:
## Known stack suffix:
## L_PAR DIV
## LR(1) items:
simple_expr -> L_PAR DIV . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## L_PAR DIV R_PAR
## LR(1) items:
simple_expr -> L_PAR DIV R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR DIV R_PAR

State 105:
## Known stack suffix:
## L_PAR CONCAT
## LR(1) items:
simple_expr -> L_PAR CONCAT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## L_PAR CONCAT R_PAR
## LR(1) items:
simple_expr -> L_PAR CONCAT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR CONCAT R_PAR

State 107:
## Known stack suffix:
## L_PAR CAT
## LR(1) items:
simple_expr -> L_PAR CAT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## L_PAR CAT R_PAR
## LR(1) items:
simple_expr -> L_PAR CAT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR CAT R_PAR

State 109:
## Known stack suffix:
## L_PAR APPEND
## LR(1) items:
simple_expr -> L_PAR APPEND . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## L_PAR APPEND R_PAR
## LR(1) items:
simple_expr -> L_PAR APPEND R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR APPEND R_PAR

State 111:
## Known stack suffix:
## L_PAR AND
## LR(1) items:
simple_expr -> L_PAR AND . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## L_PAR AND R_PAR
## LR(1) items:
simple_expr -> L_PAR AND R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR AND R_PAR

State 113:
## Known stack suffix:
## L_PAR ADD
## LR(1) items:
simple_expr -> L_PAR ADD . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On R_PAR shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## L_PAR ADD R_PAR
## LR(1) items:
simple_expr -> L_PAR ADD R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR ADD R_PAR

State 115:
## Known stack suffix:
## L_PAR expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
simple_expr -> L_PAR expr . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On R_PAR shift to state 116
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 116:
## Known stack suffix:
## L_PAR expr R_PAR
## LR(1) items:
simple_expr -> L_PAR expr R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV CONCAT CAT BOOL APPEND AND ADD
--   reduce production simple_expr -> L_PAR expr R_PAR

State 117:
## Known stack suffix:
## SUB expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> SUB expr . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On APPEND shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> SUB expr
** Conflict on APPEND

State 118:
## Known stack suffix:
## L_PAR expr
## LR(1) items:
atomic_expr -> L_PAR expr . R_PAR [ SEMICOLON R_SQ ]
expr -> expr . SEMICOLON expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LEQ GT GEQ EQ DIV CONCAT CAT APPEND AND ADD ]
simple_expr -> L_PAR expr . R_PAR [ SEMICOLON R_SQ ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On R_PAR shift to state 119
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:

State 119:
## Known stack suffix:
## L_PAR expr R_PAR
## LR(1) items:
atomic_expr -> L_PAR expr R_PAR . [ SEMICOLON R_SQ ]
simple_expr -> L_PAR expr R_PAR . [ SEMICOLON R_SQ ]
## Transitions:
## Reductions:
-- On SEMICOLON R_SQ
--   reduce production atomic_expr -> L_PAR expr R_PAR
-- On SEMICOLON R_SQ
--   reduce production simple_expr -> L_PAR expr R_PAR
** Conflict on SEMICOLON R_SQ

State 120:
## Known stack suffix:
## simple_expr
## LR(1) items:
atomic_expr -> simple_expr . [ SEMICOLON R_SQ ]
## Transitions:
## Reductions:
-- On SEMICOLON R_SQ
--   reduce production atomic_expr -> simple_expr

State 121:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,atomic_expr)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,atomic_expr)) -> separated_nonempty_list(SEMICOLON,atomic_expr) . [ R_SQ ]
## Transitions:
## Reductions:
-- On R_SQ
--   reduce production loption(separated_nonempty_list(SEMICOLON,atomic_expr)) -> separated_nonempty_list(SEMICOLON,atomic_expr)

State 122:
## Known stack suffix:
## L_SQ loption(separated_nonempty_list(SEMICOLON,atomic_expr))
## LR(1) items:
expr -> L_SQ loption(separated_nonempty_list(SEMICOLON,atomic_expr)) . R_SQ [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
-- On R_SQ shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## L_SQ loption(separated_nonempty_list(SEMICOLON,atomic_expr)) R_SQ
## LR(1) items:
expr -> L_SQ loption(separated_nonempty_list(SEMICOLON,atomic_expr)) R_SQ . [ THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD ]
## Transitions:
## Reductions:
-- On THEN SUB SEMICOLON R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV CONCAT CAT APPEND AND ADD
--   reduce production expr -> L_SQ loption(separated_nonempty_list(SEMICOLON,atomic_expr)) R_SQ

State 124:
## Known stack suffix:
## atomic_expr
## LR(1) items:
separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr . [ R_SQ ]
separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr . SEMICOLON separated_nonempty_list(SEMICOLON,atomic_expr) [ R_SQ ]
## Transitions:
-- On SEMICOLON shift to state 125
## Reductions:
-- On R_SQ
--   reduce production separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr

State 125:
## Known stack suffix:
## atomic_expr SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr SEMICOLON . separated_nonempty_list(SEMICOLON,atomic_expr) [ R_SQ ]
## Transitions:
-- On TAIL shift to state 8
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 16
-- On L_PAR shift to state 17
-- On INT shift to state 36
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On BOOL shift to state 43
-- On simple_expr shift to state 120
-- On separated_nonempty_list(SEMICOLON,atomic_expr) shift to state 126
-- On atomic_expr shift to state 124
## Reductions:

State 126:
## Known stack suffix:
## atomic_expr SEMICOLON separated_nonempty_list(SEMICOLON,atomic_expr)
## LR(1) items:
separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr SEMICOLON separated_nonempty_list(SEMICOLON,atomic_expr) . [ R_SQ ]
## Transitions:
## Reductions:
-- On R_SQ
--   reduce production separated_nonempty_list(SEMICOLON,atomic_expr) -> atomic_expr SEMICOLON separated_nonempty_list(SEMICOLON,atomic_expr)

State 127:
## Known stack suffix:
## LET REC ID list(ID) EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
req -> LET REC ID list(ID) EQ expr . [ LET EOF ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On LET EOF
--   reduce production req -> LET REC ID list(ID) EQ expr

State 128:
## Known stack suffix:
## LET ID
## LR(1) items:
req -> LET ID . list(ID) EQ expr [ LET EOF ]
## Transitions:
-- On ID shift to state 4
-- On list(ID) shift to state 129
## Reductions:
-- On EQ
--   reduce production list(ID) ->

State 129:
## Known stack suffix:
## LET ID list(ID)
## LR(1) items:
req -> LET ID list(ID) . EQ expr [ LET EOF ]
## Transitions:
-- On EQ shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## LET ID list(ID) EQ
## LR(1) items:
req -> LET ID list(ID) EQ . expr [ LET EOF ]
## Transitions:
-- On TAIL shift to state 8
-- On SUB shift to state 9
-- On STRING shift to state 10
-- On PRINT shift to state 11
-- On NOT shift to state 12
-- On NEG shift to state 13
-- On L_SQ shift to state 14
-- On L_PAR shift to state 20
-- On LET shift to state 32
-- On INT shift to state 36
-- On IF shift to state 37
-- On ID shift to state 38
-- On HEAD shift to state 39
-- On FUN shift to state 40
-- On BOOL shift to state 43
-- On simple_expr shift to state 44
-- On expr shift to state 131
-- On app_expr shift to state 60
## Reductions:

State 131:
## Known stack suffix:
## LET ID list(ID) EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . EQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . LEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . GEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CONCAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . CAT expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
expr -> expr . APPEND expr [ SUB SEMICOLON OR NEQ MUL MOD LT LET LEQ GT GEQ EQ EOF DIV CONCAT CAT APPEND AND ADD ]
req -> LET ID list(ID) EQ expr . [ LET EOF ]
## Transitions:
-- On SUB shift to state 46
-- On SEMICOLON shift to state 52
-- On OR shift to state 54
-- On NEQ shift to state 56
-- On MUL shift to state 48
-- On MOD shift to state 58
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQ shift to state 78
-- On DIV shift to state 62
-- On CONCAT shift to state 64
-- On CAT shift to state 66
-- On APPEND shift to state 50
-- On AND shift to state 80
-- On ADD shift to state 68
## Reductions:
-- On LET EOF
--   reduce production req -> LET ID list(ID) EQ expr

State 132:
## Known stack suffix:
## req_list
## LR(1) items:
main -> req_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## req_list EOF
## LR(1) items:
main -> req_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> req_list EOF

State 134:
## Known stack suffix:
## req
## LR(1) items:
req_list -> req . req_list [ EOF ]
req_list -> req . [ EOF ]
## Transitions:
-- On LET shift to state 1
-- On req_list shift to state 135
-- On req shift to state 134
## Reductions:
-- On EOF
--   reduce production req_list -> req

State 135:
## Known stack suffix:
## req req_list
## LR(1) items:
req_list -> req req_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production req_list -> req req_list

State 136:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

