State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SEMICOLON shift to state 1
-- On INT shift to state 2
-- On IF shift to state 3
-- On main shift to state 46
-- On instruction shift to state 47
-- On function_list shift to state 49
-- On expression shift to state 51
## Reductions:
-- On EOF
--   reduce production function_list ->

State 1:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
instruction -> SEMICOLON . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production instruction -> SEMICOLON

State 2:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production expression -> INT

State 3:
## Known stack suffix:
## IF
## LR(1) items:
function_list -> IF . THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On THEN shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## IF THEN
## LR(1) items:
function_list -> IF THEN . ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On ELSE shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## IF THEN ELSE
## LR(1) items:
function_list -> IF THEN ELSE . WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On WHILE shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## IF THEN ELSE WHILE
## LR(1) items:
function_list -> IF THEN ELSE WHILE . L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On L_PAR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR . R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On R_PAR shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR . L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On L_CUR_BRK shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK . R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On R_CUR_BRK shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK . L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On L_SQ_BRK shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK . R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On R_SQ_BRK shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK . ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On ADD shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD . SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On SUB shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB . MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On MUL shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL . DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On DIV shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV . MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On MOD shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD . AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On AND shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND . OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On OR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR . NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On NOT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT . EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On EQ shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ . NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On NEQ shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ . LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On LT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT . GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On GT shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT . LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On LEQ shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ . GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On GEQ shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ . COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On COMMA shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA . SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON . ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On ASSIGN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN . DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On DEF shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF . DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On DOT shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT . PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On PRINT shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT . SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On SIZE shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE . RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On RETURN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN . INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On INT_TYP shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP . FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On FLOAT_TYP shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP . BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On BOOL_TYP shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP . NULL_TYP VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On NULL_TYP shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP . VAR ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On VAR shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR . ID STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On ID shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID . STRING INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On STRING shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING . INT FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On INT shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT . FLOAT BOOL EOF [ EOF ]
## Transitions:
-- On FLOAT shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT . BOOL EOF [ EOF ]
## Transitions:
-- On BOOL shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL . EOF [ EOF ]
## Transitions:
-- On EOF shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF
## LR(1) items:
function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production function_list -> IF THEN ELSE WHILE L_PAR R_PAR L_CUR_BRK R_CUR_BRK L_SQ_BRK R_SQ_BRK ADD SUB MUL DIV MOD AND OR NOT EQ NEQ LT GT LEQ GEQ COMMA SEMICOLON ASSIGN DEF DOT PRINT SIZE RETURN INT_TYP FLOAT_TYP BOOL_TYP NULL_TYP VAR ID STRING INT FLOAT BOOL EOF

State 46:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 47:
## Known stack suffix:
## instruction
## LR(1) items:
main -> instruction . EOF [ # ]
## Transitions:
-- On EOF shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## instruction EOF
## LR(1) items:
main -> instruction EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> instruction EOF

State 49:
## Known stack suffix:
## function_list
## LR(1) items:
main -> function_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## function_list EOF
## LR(1) items:
main -> function_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> function_list EOF

State 51:
## Known stack suffix:
## expression
## LR(1) items:
main -> expression . EOF [ # ]
## Transitions:
-- On EOF shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expression EOF
## LR(1) items:
main -> expression EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> expression EOF

